#pragma once
#include "Config.h"
#include "Day.h"
class Building {
public:
	Building();
	virtual void checkApplications() = 0; // Проверяем, что нужно отправить
	virtual void checkOrder() = 0; // Проверяем, что нужно заказать
	virtual void updateDayInfo(Day* day) = 0; // Передает информацию по дню
	virtual ~Building();
protected:
	virtual bool createApplication(Building* receiver) = 0; // Создание заказа
	virtual void sendApplication(Building* receiver) = 0; // Отправка заказа
	virtual void receiveApplication(Application* application) = 0; // Прием заказа
	virtual void sendProducts(Application* application) = 0; // Отправка продуктов
	virtual void receiveProducts(Application* application) = 0; // Прием продуктов
	virtual Application* generateApplication(Building* receiver) = 0; // Генерация заказа
	virtual void distributionProducts() = 0; // Распределение продуктов
	virtual int64_t getReputation(Building* building) = 0; // Возвращает, как он относится к building 

	std::map<Building*, Application*> today_applications; // То что мы заказали сегодня
	std::vector<std::vector<Application*>> applications; // То что мы отправляем
	std::vector<List*> products; // То что лежит складе
	std::vector<Application*> expected_applications; // Заказы, которые мы ожидаем
	std::map<Building*, int64_t> reputations; // Как мы относимся к каждому объекту
	int64_t category; // К какой категории относится объект
	std::vector<Building*> buildings; // У кого мы можем заказывать
};

